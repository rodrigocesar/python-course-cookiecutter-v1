# Options
# create a repo (optional)
# upsert PyPI secrets to the repo
# push a PR to the repo with a template

name: Create or Update Repo

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: "repo_name: create/update: rodrigocesar/<repo_name>"
        required: true
        type: string
      public:
        description: "Make repo public (default: private)"
        required: false
        type: boolean
        default: false
      package_import_name:
        description: "package_import_name: e.g. from <package_import_name> import *"
        required: false
        type: string

      upsert_pypi_secrets:
        description: "Upsert PyPI secrets"
        required: true
        type: boolean
        default: true

      populate_from_template:
        description: "Populate from template"
        required: true
        type: boolean
        default: true

env:
  # Change this line to use your PAT instead
  GH_TOKEN: ${{ secrets.PAT_WITH_WORKFLOW_SCOPE }}

jobs:
  create-repo-if-not-exists:
    name: Create Repo
    runs-on: ubuntu-latest
    steps:
      - name: Configure git user
        run: |
          git config --global user.email "rodrigocesar@gmail.com"
          git config --global user.name "Rodrigo Cesar da Silva"
      - name: Create repo if not exists
        run: |
          gh repo clone rodrigocesar/${{ github.event.inputs.repo_name }} || true
          if [[ -d ${{ github.event.inputs.repo_name }} ]]; then
            echo "Repo already exists. Exiting."
            exit 0
          fi

          if [[ "${{ github.event.inputs.public }}" == "true" ]]; then
            PUBLIC_OR_PRIVATE="public"
          else
            PUBLIC_OR_PRIVATE="private"
          fi

          gh repo create \
            "phitoduck/${{ github.event.inputs.repo_name }}" \
            "--$PUBLIC_OR_PRIVATE"

          gh repo clone phitoduck/${{ github.event.inputs.repo_name }}
          cd ${{ github.event.inputs.repo_name }}
          echo "# ${{ github.event.inputs.repo_name }}" > README.md
          git add README.md
          git commit -m "feat: initial commit"
          git remote set-url origin "https://rodrigocesar:${GH_TOKEN}@github.com/rodrigocesar/${{ github.event.inputs.repo_name }}"
          git push --set-upstream origin main

  upsert-pypi-secrets:
    name: Upsert PyPI Secrets
    # if+needs: always run if upsert_pypi_secrets is true, but if
    # create-repo is run, run after create-repo
    if: ${{ github.event.inputs.upsert_pypi_secrets == 'true' }}
    needs: create-repo-if-not-exists
    runs-on: ubuntu-latest
    steps:
      - name: Configure git user
        run: |
          gh secret set TEST_PYPI_TOKEN \
            --body "${{ secrets.TEST_PYPI_TOKEN }}" \
            --repo "phitoduck/${{ github.event.inputs.repo_name }}"
          gh secret set PROD_PYPI_TOKEN \
            --body "${{ secrets.PROD_PYPI_TOKEN }}" \
            --repo "phitoduck/${{ github.event.inputs.repo_name }}"

  open-pr-to-populate-from-template:
    name: Open PR - Populate from template
    if: ${{ github.event.inputs.populate_from_template == 'true' }}
    needs:
      - create-repo-if-not-exists
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: 3.8
      - name: Install test dependencies
        run: /bin/bash -x run.sh install
      - name: Configure git user
        run: |
          git config --global user.email "test@test.com"
          git config --global user.name "Eric Riddoch"
      - name: Open PR with a template
        run: |
          set -x

          # clone the created repo
          gh repo clone phitoduck/${{ github.event.inputs.repo_name }}

          # delete the contents inside except for the .git folder
          mv ${{ github.event.inputs.repo_name }}/.git ./.git.bak
          rm -rf ${{ github.event.inputs.repo_name }}

          # generate the project
          REPO_NAME="${{ github.event.inputs.repo_name }}" \
          PACKAGE_IMPORT_NAME="${{ github.event.inputs.package_import_name }}" \
            /bin/bash -x run.sh generate-project

          # put the .git folder in the generated project
          mv .git.bak ${{ github.event.inputs.repo_name }}/.git

          # stage the changes on a new branch, for linting
          cd ${{ github.event.inputs.repo_name }}
          BRANCH_NAME="populate-from-template-${{ github.run_number }}"
          git checkout -b $BRANCH_NAME
          git add --all

          # apply autoformatters (so linting is satisfied in the generated project)
          # pre-commit requires that the .pre-commit-config file be committed
          /bin/bash -x run.sh install
          /bin/bash -x run.sh lint || true

          # re-stage and commit and push the changes
          git add --all
          git commit -m 'feat!: populated from `python-course-cookiecutter-v1` template'
          git remote set-url origin "https://rodrigocesar:${GH_TOKEN}@github.com/rodrigocesar/${{ github.event.inputs.repo_name }}"
          git push --set-upstream origin $BRANCH_NAME

          # open a PR
          gh pr create \
            --title "Populated from `python-course-cookiecutter-v1` template" \
            --body "This PR was generated by a GitHub Action. It populates the repo from the \`python-course-cookiecutter-v1\` template." \
            --base main \
            --head $BRANCH_NAME \
            --repo "phitoduck/${{ github.event.inputs.repo_name }}"
